name: build (mbaluev/next-auth-v5:latest)
on:
  workflow_dispatch:
  push:
    branches:
      - main
env:
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
#  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
jobs:
  build:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Create env file
        run: |
          touch .env
          echo APP_URL=${{ vars.APP_URL }} >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo AUTH_SECRET=${{ secrets.AUTH_SECRET }} >> .env
          echo GITHUB_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }} >> .env
          echo GITHUB_CLIENT_SECRET=${{ secrets.GITHUB_CLIENT_SECRET }} >> .env
          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env
          echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env
          echo RESEND_API_KEY=${{ secrets.RESEND_API_KEY }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          cat .env
      - name: Apply all pending migrations to the database
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN_NEXT_AUTH_V5 }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./
          push: true
          dockerfile: ./Dockerfile
          tags: mbaluev/next-auth-v5:latest
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ env.DOCKERHUB_USERNAME }}
#          password: ${{ env.DOCKERHUB_TOKEN }}
#      - name: Set permissions for private key
#        run: |
#          echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
#          chmod 600 key.pem
#      - name: Stop running container
#        run: |
#          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@ec2-16-171-27-175.eu-north-1.compute.amazonaws.com 'sudo docker stop the-form-client || true'
#          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@ec2-16-171-27-175.eu-north-1.compute.amazonaws.com 'sudo docker rm the-form-client || true'
#          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@ec2-16-171-27-175.eu-north-1.compute.amazonaws.com 'sudo docker image prune -a --force'
#      - name: Pull Docker image
#        run: |
#          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@ec2-16-171-27-175.eu-north-1.compute.amazonaws.com 'sudo docker pull mbaluev/the-form-client:main'
#      - name: Run new container
#        run: |
#          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@ec2-16-171-27-175.eu-north-1.compute.amazonaws.com 'sudo docker run -d --name the-form-client -p 80:3000 mbaluev/the-form-client:main'
